"""
Handler para los comandos de creaci√≥n de campa√±as.
"""

import logging
from typing import List
from datetime import datetime

from alpes_partners.seedwork.aplicacion.handlers import ManejadorComando
from alpes_partners.seedwork.dominio.excepciones import ExcepcionReglaDeNegocio
from ..comandos.crear_campana import CrearCampana, CrearCampanaPorCategoria
from alpes_partners.modulos.campanas.dominio.entidades import Campa√±a
from alpes_partners.modulos.campanas.dominio.repositorios import RepositorioCampanas
from alpes_partners.modulos.campanas.dominio.objetos_valor import TipoComision
from alpes_partners.modulos.campanas.dominio.plantillas_campanas import GeneradorCampanasPorCategoria

logger = logging.getLogger(__name__)


class CrearCampanaHandler(ManejadorComando):
    """Handler para crear una campa√±a individual."""
    
    def __init__(self, repositorio_campanas: RepositorioCampanas):
        self.repositorio_campanas = repositorio_campanas
    
    def handle(self, comando: CrearCampana) -> str:
        """Maneja el comando de crear campa√±a."""
        logger.info(f"üéØ CAMPA√ëAS: Creando campa√±a '{comando.nombre}'")
        
        # Validar que no exista una campa√±a con el mismo nombre
        if self.repositorio_campanas.existe_con_nombre(comando.nombre):
            raise ExcepcionReglaDeNegocio(f"Ya existe una campa√±a con el nombre '{comando.nombre}'")
        
        # Convertir tipo de comisi√≥n
        try:
            tipo_comision = TipoComision(comando.tipo_comision.lower())
        except ValueError:
            raise ExcepcionReglaDeNegocio(f"Tipo de comisi√≥n inv√°lido: {comando.tipo_comision}")
        
        # Crear la campa√±a usando el factory method
        campa√±a = Campa√±a.crear(
            nombre=comando.nombre,
            descripcion=comando.descripcion,
            tipo_comision=tipo_comision,
            valor_comision=comando.valor_comision,
            moneda=comando.moneda,
            fecha_inicio=comando.fecha_inicio,
            fecha_fin=comando.fecha_fin,
            titulo_material=comando.titulo_material,
            descripcion_material=comando.descripcion_material,
            categorias_objetivo=comando.categorias_objetivo,
            tipos_afiliado_permitidos=comando.tipos_afiliado_permitidos
        )
        
        # Actualizar material promocional con enlaces e im√°genes adicionales
        if comando.enlaces_material or comando.imagenes_material or comando.banners_material:
            from alpes_partners.modulos.campanas.dominio.objetos_valor import MaterialPromocional
            material_actualizado = MaterialPromocional(
                titulo=campa√±a.material_promocional.titulo,
                descripcion=campa√±a.material_promocional.descripcion,
                enlaces=comando.enlaces_material,
                imagenes=comando.imagenes_material,
                banners=comando.banners_material
            )
            campa√±a.material_promocional = material_actualizado
        
        # Actualizar criterios de afiliado con pa√≠ses y m√©tricas
        if comando.paises_permitidos or comando.metricas_minimas:
            from alpes_partners.modulos.campanas.dominio.objetos_valor import CriteriosAfiliado
            criterios_actualizados = CriteriosAfiliado(
                tipos_permitidos=campa√±a.criterios_afiliado.tipos_permitidos,
                categorias_requeridas=campa√±a.criterios_afiliado.categorias_requeridas,
                paises_permitidos=comando.paises_permitidos,
                metricas_minimas=comando.metricas_minimas
            )
            campa√±a.criterios_afiliado = criterios_actualizados
        
        # Auto-activar si se solicita
        if comando.auto_activar:
            try:
                campa√±a.activar()
                logger.info(f"‚úÖ CAMPA√ëAS: Campa√±a '{comando.nombre}' activada autom√°ticamente")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è CAMPA√ëAS: No se pudo activar autom√°ticamente la campa√±a: {e}")
        
        # Guardar en repositorio
        self.repositorio_campanas.agregar(campa√±a)
        
        logger.info(f"‚úÖ CAMPA√ëAS: Campa√±a '{comando.nombre}' creada exitosamente con ID: {campa√±a.id}")
        
        # Log adicional para campa√±as autom√°ticas
        if comando.influencer_origen_id:
            logger.info(f"ü§ñ CAMPA√ëAS: Campa√±a autom√°tica creada para influencer {comando.influencer_origen_id} en categor√≠a {comando.categoria_origen}")
        
        return campa√±a.id


class CrearCampanaPorCategoriaHandler(ManejadorComando):
    """Handler para crear campa√±as autom√°ticamente basadas en categor√≠as de influencers."""
    
    def __init__(self, repositorio_campanas: RepositorioCampanas):
        self.repositorio_campanas = repositorio_campanas
        self.crear_campana_handler = CrearCampanaHandler(repositorio_campanas)
    
    def handle(self, comando: CrearCampanaPorCategoria) -> List[str]:
        """Maneja el comando de crear campa√±as por categor√≠a."""
        logger.info(f"ü§ñ CAMPA√ëAS: Creando campa√±as autom√°ticas para influencer {comando.nombre_influencer}")
        logger.info(f"üìã CAMPA√ëAS: Categor√≠as del influencer: {comando.categorias_influencer}")
        
        campanas_creadas = []
        
        # Generar campa√±as para cada categor√≠a
        campanas_data = GeneradorCampanasPorCategoria.generar_campanas_para_influencer(
            influencer_id=comando.influencer_id,
            nombre_influencer=comando.nombre_influencer,
            categorias=comando.categorias_influencer
        )
        
        for campana_data in campanas_data:
            try:
                # Crear comando individual
                comando_crear = CrearCampana(
                    nombre=campana_data['nombre'],
                    descripcion=campana_data['descripcion'],
                    tipo_comision=campana_data['tipo_comision'],
                    valor_comision=campana_data['valor_comision'],
                    moneda=campana_data['moneda'],
                    fecha_inicio=campana_data['fecha_inicio'],
                    fecha_fin=campana_data['fecha_fin'],
                    titulo_material=campana_data['titulo_material'],
                    descripcion_material=campana_data['descripcion_material'],
                    categorias_objetivo=campana_data['categorias_objetivo'],
                    tipos_afiliado_permitidos=campana_data['tipos_afiliado_permitidos'],
                    enlaces_material=campana_data['enlaces_material'],
                    imagenes_material=campana_data['imagenes_material'],
                    metricas_minimas=campana_data['metricas_minimas'],
                    auto_activar=campana_data['auto_activar'],
                    influencer_origen_id=campana_data['influencer_origen_id'],
                    categoria_origen=campana_data['categoria_origen']
                )
                
                # Ejecutar creaci√≥n
                campa√±a_id = self.crear_campana_handler.handle(comando_crear)
                campanas_creadas.append(campa√±a_id)
                
                logger.info(f"‚úÖ CAMPA√ëAS: Campa√±a autom√°tica creada: {campana_data['nombre']} (ID: {campa√±a_id})")
                
            except Exception as e:
                logger.error(f"‚ùå CAMPA√ëAS: Error creando campa√±a para categor√≠a {campana_data['categoria_origen']}: {e}")
                # Continuar con las dem√°s campa√±as aunque una falle
                continue
        
        logger.info(f"üéâ CAMPA√ëAS: Proceso completado. {len(campanas_creadas)} campa√±as creadas para {comando.nombre_influencer}")
        
        return campanas_creadas
