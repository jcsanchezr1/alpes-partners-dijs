"""
Handlers para eventos de influencers en el m√≥dulo de campa√±as.
Siguiendo principios DDD, estos handlers representan las reacciones del dominio
de campa√±as a eventos que ocurren en el dominio de influencers.
"""

import logging
from typing import Dict, Any, Optional
from datetime import datetime

from ..comandos.crear_campana import CrearCampanaPorCategoria
from .crear_campana_handler import CrearCampanaPorCategoriaHandler

logger = logging.getLogger(__name__)


class HandlerEventosInfluencers:
    """
    Handler que procesa eventos de influencers desde la perspectiva del dominio de campa√±as.
    
    En DDD, este handler representa c√≥mo el bounded context de Campa√±as
    reacciona a eventos que ocurren en el bounded context de Influencers.
    """
    
    def __init__(self, uow):
        """Inicializa el handler de eventos de influencers con UoW como influencers."""
        self.uow = uow
        self.crear_campana_handler = CrearCampanaPorCategoriaHandler(uow.repositorio_campanas)
        logger.info("üéØ CAMPA√ëAS: Handler de eventos de influencers inicializado con UoW")
    
    def handle_influencer_registrado(self, evento_data: Dict[str, Any]) -> None:
        """
        Maneja el evento de influencer registrado.
        
        Desde la perspectiva de campa√±as, cuando un influencer se registra:
        - Podr√≠amos crear un perfil de influencer para campa√±as
        - Podr√≠amos evaluar si cumple criterios para campa√±as autom√°ticas
        - Podr√≠amos notificar a los gestores de campa√±as
        """
        logger.info("üì¢ CAMPA√ëAS: Procesando evento InfluencerRegistrado")
        logger.info(f"   üìã ID Influencer: {evento_data.get('id_influencer')}")
        logger.info(f"   üë§ Nombre: {evento_data.get('nombre')}")
        logger.info(f"   üìß Email: {evento_data.get('email')}")
        logger.info(f"   üè∑Ô∏è Categor√≠as: {evento_data.get('categorias', [])}")
        logger.info(f"   üìÖ Fecha Registro: {evento_data.get('fecha_registro')}")
        
        # Crear campa√±as autom√°ticamente basadas en las categor√≠as del influencer
        self._crear_campa√±as_automaticas(evento_data)
        
        logger.info("‚úÖ CAMPA√ëAS: Evento InfluencerRegistrado procesado exitosamente")
    
    def handle_influencer_activado(self, evento_data: Dict[str, Any]) -> None:
        """
        Maneja el evento de influencer activado.
        
        Desde campa√±as, cuando un influencer se activa:
        - Podr√≠amos habilitarlo para participar en campa√±as
        - Podr√≠amos notificar sobre disponibilidad
        """
        logger.info("üì¢ CAMPA√ëAS: Procesando evento InfluencerActivado")
        logger.info(f"   üìã ID Influencer: {evento_data.get('id_influencer')}")
        logger.info(f"   üë§ Nombre: {evento_data.get('nombre')}")
        logger.info(f"   üìÖ Fecha Activaci√≥n: {evento_data.get('fecha_activacion')}")
        
        # L√≥gica de dominio para activaci√≥n
        self._habilitar_para_campa√±as(evento_data)
        
        logger.info("‚úÖ CAMPA√ëAS: Evento InfluencerActivado procesado exitosamente")
    
    def handle_influencer_desactivado(self, evento_data: Dict[str, Any]) -> None:
        """
        Maneja el evento de influencer desactivado.
        
        Desde campa√±as, cuando un influencer se desactiva:
        - Podr√≠amos suspender campa√±as activas
        - Podr√≠amos buscar reemplazos
        """
        logger.info("üì¢ CAMPA√ëAS: Procesando evento InfluencerDesactivado")
        logger.info(f"   üìã ID Influencer: {evento_data.get('id_influencer')}")
        logger.info(f"   üë§ Nombre: {evento_data.get('nombre')}")
        logger.info(f"   ‚ö†Ô∏è Motivo: {evento_data.get('motivo')}")
        logger.info(f"   üìÖ Fecha Desactivaci√≥n: {evento_data.get('fecha_desactivacion')}")
        
        # L√≥gica de dominio para desactivaci√≥n
        self._suspender_campa√±as_activas(evento_data)
        
        logger.info("‚úÖ CAMPA√ëAS: Evento InfluencerDesactivado procesado exitosamente")
    
    def _crear_campa√±as_automaticas(self, evento_data: Dict[str, Any]) -> None:
        """Crea campa√±as autom√°ticamente basadas en las categor√≠as del influencer."""
        try:
            # Extraer datos del evento
            influencer_id = evento_data.get('id_influencer')
            nombre_influencer = evento_data.get('nombre')
            email_influencer = evento_data.get('email')
            categorias = evento_data.get('categorias', [])
            fecha_registro_str = evento_data.get('fecha_registro')
            
            # Convertir fecha si es string
            if isinstance(fecha_registro_str, str):
                try:
                    fecha_registro = datetime.fromisoformat(fecha_registro_str.replace('Z', '+00:00'))
                except:
                    fecha_registro = datetime.utcnow()
            else:
                fecha_registro = fecha_registro_str or datetime.utcnow()
            
            if not influencer_id or not nombre_influencer or not categorias:
                logger.warning("‚ö†Ô∏è CAMPA√ëAS: Datos insuficientes para crear campa√±as autom√°ticas")
                return
            
            logger.info(f"ü§ñ CAMPA√ëAS: Iniciando creaci√≥n autom√°tica de campa√±as para {nombre_influencer}")
            logger.info(f"   üìã Categor√≠as a procesar: {categorias}")
            
            # Crear comando para generar campa√±as por categor√≠a
            comando = CrearCampanaPorCategoria(
                influencer_id=influencer_id,
                nombre_influencer=nombre_influencer,
                email_influencer=email_influencer,
                categorias_influencer=categorias,
                fecha_registro_influencer=fecha_registro
            )
            
            # Ejecutar creaci√≥n de campa√±as usando UoW (como influencers)
            campanas_creadas = self.crear_campana_handler.handle(comando)
            
            # La UoW se encarga del commit autom√°ticamente
            
            logger.info(f"üéâ CAMPA√ëAS: {len(campanas_creadas)} campa√±as autom√°ticas creadas y persistidas exitosamente")
            logger.info(f"   üìã IDs de campa√±as: {campanas_creadas}")
            
        except Exception as e:
            logger.error(f"‚ùå CAMPA√ëAS: Error creando campa√±as autom√°ticas: {e}")
            # No re-lanzar la excepci√≥n para no afectar el procesamiento del evento principal
        
    def _habilitar_para_campa√±as(self, evento_data: Dict[str, Any]) -> None:
        """Habilita al influencer para participar en campa√±as."""
        logger.info(f"   ‚úÖ CAMPA√ëAS: Habilitando influencer para campa√±as activas")
        # L√≥gica para habilitar en campa√±as
        
    def _suspender_campa√±as_activas(self, evento_data: Dict[str, Any]) -> None:
        """Suspende las campa√±as activas del influencer."""
        logger.info(f"   ‚è∏Ô∏è CAMPA√ëAS: Suspendiendo campa√±as activas del influencer")
        # L√≥gica para suspender campa√±as
